import React from 'react'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import { PostCard } from '@/components/community/PostCard'
import type { Post } from '@/lib/types/community'

// Mock useRouter at the top level
const mockRouter = {
  push: jest.fn(),
  replace: jest.fn(),
  back: jest.fn(),
  forward: jest.fn(),
  refresh: jest.fn(),
  prefetch: jest.fn(),
}

jest.mock('next/navigation', () => ({
  useRouter: () => mockRouter,
}))

// Mock the actions
jest.mock('@/lib/actions/posts', () => ({
  deletePostAction: jest.fn(),
}))

// Import the mocked function after mocking
import { deletePostAction } from '@/lib/actions/posts'
const mockDeletePostAction = deletePostAction as jest.MockedFunction<typeof deletePostAction>

// Mock Timestamp class
class MockTimestamp {
  public seconds: number
  public nanoseconds: number

  constructor(seconds: number, nanoseconds: number = 0) {
    this.seconds = seconds
    this.nanoseconds = nanoseconds
  }

  toDate() {
    return new Date(this.seconds * 1000 + this.nanoseconds / 1000000)
  }

  getTime() {
    return this.seconds * 1000 + this.nanoseconds / 1000000
  }

  static now() {
    return new MockTimestamp(Date.now() / 1000)
  }

  static fromDate(date: Date) {
    return new MockTimestamp(date.getTime() / 1000)
  }
}

// Mock post data for swing dance community
const createMockPost = (overrides: Partial<Post> = {}): Post => ({
  id: 'post-1',
  title: 'Ïä§ÏúôÎåÑÏä§ Î†àÏä® ÌõÑÍ∏∞ Í≥µÏú†Ìï©ÎãàÎã§!',
  content: 'Ïñ¥Ï†ú Í∞ïÎÇ®Ïó≠ Ïä§ÏúôÎåÑÏä§ Ïä§ÌäúÎîîÏò§ÏóêÏÑú Î¶∞ÎîîÌï© Í∏∞Ï¥à Î†àÏä®ÏùÑ Î∞õÏïòÎäîÎç∞ Ï†ïÎßê Ïû¨ÎØ∏ÏûàÏóàÏñ¥Ïöî. ÏÑ†ÏÉùÎãòÏù¥ ÏπúÏ†àÌïòÍ≤å Í∞ÄÎ•¥Ï≥êÏ£ºÏÖîÏÑú...',
  category: 'review',
  status: 'active',
  visibility: 'public',
  tags: ['Î¶∞ÎîîÌï©', 'Í∞ïÎÇ®Ïó≠', 'Í∏∞Ï¥àÎ†àÏä®'],
  stats: {
    views: 142,
    likes: 15,
    comments: 8,
    shares: 3,
    reports: 0,
    lastActivity: new MockTimestamp(Date.now() / 1000, 0) as any
  },
  metadata: {
    createdAt: new MockTimestamp(Date.now() / 1000 - 3600, 0) as any, // 1ÏãúÍ∞Ñ Ï†Ñ
    updatedAt: new MockTimestamp(Date.now() / 1000, 0) as any,
    authorId: 'user-123',
    authorName: 'Ïä§ÏúôÏ¥àÎ≥¥Ïûê',
    authorProfileUrl: 'https://example.com/profile.jpg',
    isPinned: false
  },
  isPinned: false,
  isFeatured: false,
  region: 'ÏÑúÏö∏',
  attachments: [
    {
      id: 'img-1',
      fileName: 'lesson_photo.jpg',
      fileUrl: 'https://example.com/lesson.jpg',
      fileSize: 1024000,
      mimeType: 'image/jpeg',
      uploadedAt: new MockTimestamp(Date.now() / 1000, 0) as any
    }
  ],
  ...overrides
})

describe('PostCard Ïª¥Ìè¨ÎÑåÌä∏', () => {
  beforeEach(() => {
    jest.clearAllMocks()
  })

  describe('Í∏∞Î≥∏ Î†åÎçîÎßÅ', () => {
    it('Í≤åÏãúÍ∏Ä Ï†ïÎ≥¥Î•º Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÌïúÎã§', () => {
      const post = createMockPost()
      render(<PostCard post={post} />)

      expect(screen.getByText('Ïä§ÏúôÎåÑÏä§ Î†àÏä® ÌõÑÍ∏∞ Í≥µÏú†Ìï©ÎãàÎã§!')).toBeInTheDocument()
      expect(screen.getByText('Ïä§ÏúôÏ¥àÎ≥¥Ïûê')).toBeInTheDocument()
      expect(screen.getByText('Î¶¨Î∑∞')).toBeInTheDocument()
      expect(screen.getByText('15')).toBeInTheDocument()
      expect(screen.getByText('8')).toBeInTheDocument()
      expect(screen.getByText('142')).toBeInTheDocument()
    })

    it('Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ïù¥Î™®ÏßÄÎ•º Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÌïúÎã§', () => {
      const categories = [
        { category: 'general', emoji: 'üí¨' },
        { category: 'qna', emoji: '‚ùì' },
        { category: 'event', emoji: 'üé≠' },
        { category: 'marketplace', emoji: 'üõç' },
        { category: 'lesson', emoji: 'üìö' },
        { category: 'review', emoji: '‚≠ê' }
      ] as const

      categories.forEach(({ category, emoji }) => {
        const post = createMockPost({ category })
        const { rerender } = render(<PostCard post={post} />)

        expect(screen.getByText(emoji)).toBeInTheDocument()

        rerender(<div />)
      })
    })

    it('NEW Î±ÉÏßÄÎ•º 24ÏãúÍ∞Ñ Ïù¥ÎÇ¥ Í≤åÏãúÍ∏ÄÏóê ÌëúÏãúÌïúÎã§', () => {
      const recentPost = createMockPost({
        metadata: {
          ...createMockPost().metadata,
          createdAt: new MockTimestamp(Date.now() / 1000 - 3600, 0) as any // 1ÏãúÍ∞Ñ Ï†Ñ
        }
      })

      render(<PostCard post={recentPost} />)
      expect(screen.getByText('NEW')).toBeInTheDocument()
    })

    it('NEW Î±ÉÏßÄÎ•º 24ÏãúÍ∞Ñ Ïù¥ÌõÑ Í≤åÏãúÍ∏ÄÏóêÎäî ÌëúÏãúÌïòÏßÄ ÏïäÎäîÎã§', () => {
      const oldPost = createMockPost({
        metadata: {
          ...createMockPost().metadata,
          createdAt: new MockTimestamp(Date.now() / 1000 - 86400 - 3600, 0) as any // 25ÏãúÍ∞Ñ Ï†Ñ
        }
      })

      render(<PostCard post={oldPost} />)
      expect(screen.queryByText('NEW')).not.toBeInTheDocument()
    })
  })

  describe('ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ', () => {
    it('Î∂Ñ Îã®ÏúÑÎ°ú ÏãúÍ∞ÑÏùÑ ÌëúÏãúÌïúÎã§ (1ÏãúÍ∞Ñ ÎØ∏Îßå)', () => {
      const post = createMockPost({
        metadata: {
          ...createMockPost().metadata,
          createdAt: new MockTimestamp(Date.now() / 1000 - 1800, 0) as any // 30Î∂Ñ Ï†Ñ
        }
      })

      render(<PostCard post={post} />)
      expect(screen.getByText('30Î∂ÑÏ†Ñ')).toBeInTheDocument()
    })

    it('ÏãúÍ∞Ñ Îã®ÏúÑÎ°ú ÏãúÍ∞ÑÏùÑ ÌëúÏãúÌïúÎã§ (1Ïùº ÎØ∏Îßå)', () => {
      const post = createMockPost({
        metadata: {
          ...createMockPost().metadata,
          createdAt: new MockTimestamp(Date.now() / 1000 - 7200, 0) as any // 2ÏãúÍ∞Ñ Ï†Ñ
        }
      })

      render(<PostCard post={post} />)
      expect(screen.getByText('2ÏãúÍ∞ÑÏ†Ñ')).toBeInTheDocument()
    })

    it('Ïùº Îã®ÏúÑÎ°ú ÏãúÍ∞ÑÏùÑ ÌëúÏãúÌïúÎã§ (1Ï£ºÏùº ÎØ∏Îßå)', () => {
      const post = createMockPost({
        metadata: {
          ...createMockPost().metadata,
          createdAt: new MockTimestamp(Date.now() / 1000 - 172800, 0) as any // 2Ïùº Ï†Ñ
        }
      })

      render(<PostCard post={post} />)
      expect(screen.getByText('2ÏùºÏ†Ñ')).toBeInTheDocument()
    })

    it('ÎÇ†Ïßú ÌòïÏãùÏúºÎ°ú ÏãúÍ∞ÑÏùÑ ÌëúÏãúÌïúÎã§ (1Ï£ºÏùº Ïù¥ÌõÑ)', () => {
      const weekAgo = new Date(Date.now() - 8 * 24 * 60 * 60 * 1000)
      const post = createMockPost({
        metadata: {
          ...createMockPost().metadata,
          createdAt: new MockTimestamp(weekAgo.getTime() / 1000, 0) as any
        }
      })

      render(<PostCard post={post} />)
      expect(screen.getByText(weekAgo.toLocaleDateString())).toBeInTheDocument()
    })
  })

  describe('Í≥†Ï†ï Í≤åÏãúÍ∏Ä', () => {
    it('Í≥†Ï†ï Í≤åÏãúÍ∏ÄÏóê ÌïÄ ÏïÑÏù¥ÏΩòÏùÑ ÌëúÏãúÌïúÎã§', () => {
      const pinnedPost = createMockPost({
        metadata: { ...createMockPost().metadata, isPinned: true }
      })

      render(<PostCard post={pinnedPost} isPinned={true} />)

      const card = screen.getByText('Ïä§ÏúôÎåÑÏä§ Î†àÏä® ÌõÑÍ∏∞ Í≥µÏú†Ìï©ÎãàÎã§!').closest('div')
      expect(card).toHaveClass('border-blue-200', 'bg-blue-50')
    })

    it('ÏùºÎ∞ò Í≤åÏãúÍ∏ÄÏóêÎäî ÌäπÎ≥ÑÌïú Ïä§ÌÉÄÏùºÏùÑ Ï†ÅÏö©ÌïòÏßÄ ÏïäÎäîÎã§', () => {
      const post = createMockPost()
      render(<PostCard post={post} />)

      const card = screen.getByText('Ïä§ÏúôÎåÑÏä§ Î†àÏä® ÌõÑÍ∏∞ Í≥µÏú†Ìï©ÎãàÎã§!').closest('div')
      expect(card).not.toHaveClass('border-blue-200', 'bg-blue-50')
    })
  })

  describe('Ï≤®Î∂ÄÌååÏùº ÌëúÏãú', () => {
    it('Ïù¥ÎØ∏ÏßÄ Ï≤®Î∂ÄÌååÏùº ÏàòÎ•º ÌëúÏãúÌïúÎã§', () => {
      const postWithImages = createMockPost({
        attachments: [
          {
            id: 'img-1',
            fileName: 'lesson1.jpg',
            fileUrl: 'https://example.com/lesson1.jpg',
            fileSize: 1024000,
            mimeType: 'image/jpeg',
            uploadedAt: new MockTimestamp(Date.now() / 1000, 0) as any
          },
          {
            id: 'img-2',
            fileName: 'lesson2.jpg',
            fileUrl: 'https://example.com/lesson2.jpg',
            fileSize: 2048000,
            mimeType: 'image/jpeg',
            uploadedAt: new MockTimestamp(Date.now() / 1000, 0) as any
          }
        ]
      })

      render(<PostCard post={postWithImages} />)
      expect(screen.getByText('Ïù¥ÎØ∏ÏßÄ 2Ïû•')).toBeInTheDocument()
    })

    it('ÌÉúÍ∑∏Î•º ÌëúÏãúÌïúÎã§', () => {
      const postWithTags = createMockPost({
        tags: ['Î¶∞ÎîîÌï©', 'Î∞úÎΩÄ', 'Ïä§ÏúôÏïÑÏõÉ']
      })

      render(<PostCard post={postWithTags} />)
      expect(screen.getByText('#Î¶∞ÎîîÌï© +2')).toBeInTheDocument()
    })

    it('ÌÉúÍ∑∏Í∞Ä ÌïòÎÇòÎßå ÏûàÏùÑ ÎïåÎäî Í∞úÏàòÎ•º ÌëúÏãúÌïòÏßÄ ÏïäÎäîÎã§', () => {
      const postWithOneTag = createMockPost({
        tags: ['Î¶∞ÎîîÌï©']
      })

      render(<PostCard post={postWithOneTag} />)
      expect(screen.getByText('#Î¶∞ÎîîÌï©')).toBeInTheDocument()
      expect(screen.queryByText('+1')).not.toBeInTheDocument()
    })
  })

  describe('ÏûëÏÑ±Ïûê Í∂åÌïú', () => {
    it('ÏûëÏÑ±ÏûêÏóêÍ≤å ÏàòÏ†ï/ÏÇ≠Ï†ú Î≤ÑÌäºÏùÑ ÌëúÏãúÌïúÎã§', () => {
      const post = createMockPost()
      render(
        <PostCard
          post={post}
          currentUserId="user-123"
          showActions={true}
        />
      )

      // aria-label ÎòêÎäî title ÏÜçÏÑ±ÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Î≤ÑÌäº Ï∞æÍ∏∞
      const buttons = screen.getAllByRole('button')
      expect(buttons.length).toBeGreaterThanOrEqual(2)
    })

    it('ÏûëÏÑ±ÏûêÍ∞Ä ÏïÑÎãå ÏÇ¨Ïö©ÏûêÏóêÍ≤åÎäî Ïï°ÏÖò Î≤ÑÌäºÏùÑ ÌëúÏãúÌïòÏßÄ ÏïäÎäîÎã§', () => {
      const post = createMockPost()
      render(
        <PostCard
          post={post}
          currentUserId="user-456"
          showActions={true}
        />
      )

      // ÏàòÏ†ï/ÏÇ≠Ï†ú Î≤ÑÌäºÏù¥ ÏóÜÏñ¥Ïïº Ìï®
      const editButtons = screen.queryAllByText(/edit/i)
      expect(editButtons).toHaveLength(0)
    })

    it('showActionsÍ∞Ä falseÏù¥Î©¥ Ïï°ÏÖò Î≤ÑÌäºÏùÑ ÌëúÏãúÌïòÏßÄ ÏïäÎäîÎã§', () => {
      const post = createMockPost()
      render(
        <PostCard
          post={post}
          currentUserId="user-123"
          showActions={false}
        />
      )

      const editButtons = screen.queryAllByText(/edit/i)
      expect(editButtons).toHaveLength(0)
    })
  })

  describe('ÏÇ≠Ï†ú ÌîåÎ°úÏö∞', () => {
    it('ÏÇ≠Ï†ú Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú ÌôïÏù∏ Î©îÏãúÏßÄÎ•º ÌëúÏãúÌïúÎã§', async () => {
      const post = createMockPost()
      render(
        <PostCard
          post={post}
          currentUserId="user-123"
          showActions={true}
        />
      )

      // ÏÇ≠Ï†ú Î≤ÑÌäº Ï∞æÍ∏∞ (Trash2 ÏïÑÏù¥ÏΩò)
      const deleteButtons = screen.getAllByRole('button')
      const deleteButton = deleteButtons.find(button => button.querySelector('svg'))

      if (deleteButton) {
        fireEvent.click(deleteButton)
        expect(screen.getByText('Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')).toBeInTheDocument()
        expect(screen.getByText('Ï∑®ÏÜå')).toBeInTheDocument()
        expect(screen.getByText('ÏÇ≠Ï†ú')).toBeInTheDocument()
      }
    })

    it('ÏÇ≠Ï†ú ÌôïÏù∏ Ïãú deletePostActionÏùÑ Ìò∏Ï∂úÌïúÎã§', async () => {
      mockDeletePostAction.mockResolvedValue({ success: true })

      const post = createMockPost()
      render(
        <PostCard
          post={post}
          currentUserId="user-123"
          showActions={true}
        />
      )

      const deleteButtons = screen.getAllByRole('button')
      const deleteButton = deleteButtons.find(button => button.querySelector('svg'))

      if (deleteButton) {
        fireEvent.click(deleteButton)

        const confirmButton = screen.getByText('ÏÇ≠Ï†ú')
        fireEvent.click(confirmButton)

        await waitFor(() => {
          expect(mockDeletePostAction).toHaveBeenCalledWith('post-1')
        })
      }
    })

    it('ÏÇ≠Ï†ú ÏÑ±Í≥µ Ïãú ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®ÌïúÎã§', async () => {
      mockDeletePostAction.mockResolvedValue({ success: true })

      const post = createMockPost()
      render(
        <PostCard
          post={post}
          currentUserId="user-123"
          showActions={true}
        />
      )

      const deleteButtons = screen.getAllByRole('button')
      const deleteButton = deleteButtons.find(button => button.querySelector('svg'))

      if (deleteButton) {
        fireEvent.click(deleteButton)

        const confirmButton = screen.getByText('ÏÇ≠Ï†ú')
        fireEvent.click(confirmButton)

        await waitFor(() => {
          expect(mockRouter.refresh).toHaveBeenCalled()
        })
      }
    })

    it('ÏÇ≠Ï†ú Ïã§Ìå® Ïãú ÏóêÎü¨ Î©îÏãúÏßÄÎ•º ÌëúÏãúÌïúÎã§', async () => {
      mockDeletePostAction.mockResolvedValue({
        success: false,
        error: 'ÏÇ≠Ï†ú Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.'
      })

      const alertSpy = jest.spyOn(window, 'alert').mockImplementation(() => {})

      const post = createMockPost()
      render(
        <PostCard
          post={post}
          currentUserId="user-123"
          showActions={true}
        />
      )

      const deleteButtons = screen.getAllByRole('button')
      const deleteButton = deleteButtons.find(button => button.querySelector('svg'))

      if (deleteButton) {
        fireEvent.click(deleteButton)

        const confirmButton = screen.getByText('ÏÇ≠Ï†ú')
        fireEvent.click(confirmButton)

        await waitFor(() => {
          expect(alertSpy).toHaveBeenCalledWith('ÏÇ≠Ï†ú Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.')
        })
      }

      alertSpy.mockRestore()
    })
  })

  describe('ÎßÅÌÅ¨ ÎèôÏûë', () => {
    it('Ï†úÎ™© ÌÅ¥Î¶≠ Ïãú Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌïúÎã§', () => {
      const post = createMockPost()
      render(<PostCard post={post} />)

      const titleLink = screen.getByText('Ïä§ÏúôÎåÑÏä§ Î†àÏä® ÌõÑÍ∏∞ Í≥µÏú†Ìï©ÎãàÎã§!')
      expect(titleLink.closest('a')).toHaveAttribute('href', '/community/post-1')
    })
  })

  describe('ÏΩòÌÖêÏ∏† ÎØ∏Î¶¨Î≥¥Í∏∞', () => {
    it('ÏßßÏùÄ ÏΩòÌÖêÏ∏†Îäî Ï†ÑÏ≤¥Î•º ÌëúÏãúÌïúÎã§', () => {
      const post = createMockPost({
        content: 'ÏßßÏùÄ ÎÇ¥Ïö©ÏûÖÎãàÎã§.'
      })

      render(<PostCard post={post} />)
      expect(screen.getByText('"ÏßßÏùÄ ÎÇ¥Ïö©ÏûÖÎãàÎã§."')).toBeInTheDocument()
    })

    it('Í∏¥ ÏΩòÌÖêÏ∏†Îäî 50ÏûêÎ°ú ÏûêÎ•¥Í≥† ...ÏùÑ ÌëúÏãúÌïúÎã§', () => {
      const longContent = 'Ïù¥Í≤ÉÏùÄ ÏïÑÏ£º Í∏¥ ÎÇ¥Ïö©ÏûÖÎãàÎã§. '.repeat(10)
      const post = createMockPost({
        content: longContent
      })

      render(<PostCard post={post} />)
      const truncatedText = `"${longContent.slice(0, 50)}..."`
      expect(screen.getByText(truncatedText)).toBeInTheDocument()
    })
  })

  describe('Ïä§ÏúôÎåÑÏä§ Ïª§ÎÆ§ÎãàÌã∞ ÌäπÌôî ÏãúÎÇòÎ¶¨Ïò§', () => {
    it('Ïù¥Î≤§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Í≤åÏãúÍ∏ÄÏùÑ Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÌïúÎã§', () => {
      const eventPost = createMockPost({
        category: 'event',
        title: '12Ïõî Ïä§ÏúôÎåÑÏä§ ÌååÌã∞ Î™®Ïßë!',
        tags: ['ÌååÌã∞', 'Î¶∞ÎîîÌï©', 'ÌôçÎåÄ']
      })

      render(<PostCard post={eventPost} />)

      expect(screen.getByText('üé≠')).toBeInTheDocument()
      expect(screen.getByText('Ïù¥Î≤§Ìä∏/Í≥µÏßÄ')).toBeInTheDocument()
      expect(screen.getByText('12Ïõî Ïä§ÏúôÎåÑÏä§ ÌååÌã∞ Î™®Ïßë!')).toBeInTheDocument()
    })

    it('Ï§ëÍ≥†Í±∞Îûò Ïπ¥ÌÖåÍ≥†Î¶¨ Í≤åÏãúÍ∏ÄÏùÑ Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÌïúÎã§', () => {
      const marketplacePost = createMockPost({
        category: 'marketplace',
        title: 'Ïä§ÏúôÎåÑÏä§ Ïã†Î∞ú ÌåêÎß§Ìï©ÎãàÎã§',
        tags: ['Ïã†Î∞ú', 'Î¶∞ÎîîÌï©', 'Ï§ëÍ≥†']
      })

      render(<PostCard post={marketplacePost} />)

      expect(screen.getByText('üõç')).toBeInTheDocument()
      expect(screen.getByText('Ï§ëÍ≥†Í±∞Îûò')).toBeInTheDocument()
      expect(screen.getByText('Ïä§ÏúôÎåÑÏä§ Ïã†Î∞ú ÌåêÎß§Ìï©ÎãàÎã§')).toBeInTheDocument()
    })

    it('Î†àÏä® Ïπ¥ÌÖåÍ≥†Î¶¨ Í≤åÏãúÍ∏ÄÏùÑ Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÌïúÎã§', () => {
      const lessonPost = createMockPost({
        category: 'lesson',
        title: 'Ï¥àÎ≥¥ÏûêÎ•º ÏúÑÌïú Î¶∞ÎîîÌï© Î†àÏä® ÏïàÎÇ¥',
        tags: ['Î¶∞ÎîîÌï©', 'Ï¥àÎ≥¥', 'Í∞ïÎÇ®']
      })

      render(<PostCard post={lessonPost} />)

      expect(screen.getByText('üìö')).toBeInTheDocument()
      expect(screen.getByText('Î†àÏä®Ï†ïÎ≥¥')).toBeInTheDocument()
      expect(screen.getByText('Ï¥àÎ≥¥ÏûêÎ•º ÏúÑÌïú Î¶∞ÎîîÌï© Î†àÏä® ÏïàÎÇ¥')).toBeInTheDocument()
    })

    it('Q&A Ïπ¥ÌÖåÍ≥†Î¶¨ Í≤åÏãúÍ∏ÄÏùÑ Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÌïúÎã§', () => {
      const qnaPost = createMockPost({
        category: 'qna',
        title: 'Ïä§ÏúôÏïÑÏõÉ Ïó∞Í≤∞ ÎèôÏûë ÏßàÎ¨∏ÏûàÏñ¥Ïöî',
        tags: ['Ïä§ÏúôÏïÑÏõÉ', 'ÏßàÎ¨∏', 'Í∏∞Ï¥à']
      })

      render(<PostCard post={qnaPost} />)

      expect(screen.getByText('‚ùì')).toBeInTheDocument()
      expect(screen.getByText('ÏßàÎ¨∏ÎãµÎ≥Ä')).toBeInTheDocument()
      expect(screen.getByText('Ïä§ÏúôÏïÑÏõÉ Ïó∞Í≤∞ ÎèôÏûë ÏßàÎ¨∏ÏûàÏñ¥Ïöî')).toBeInTheDocument()
    })
  })
})
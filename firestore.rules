rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isStudioOwner(studioData) {
      return isAuthenticated() &&
             (request.auth.uid == studioData.metadata.createdBy || isAdmin());
    }

    function isValidStudioData(data) {
      return data.keys().hasAll(['name', 'category', 'location', 'metadata']) &&
             data.name is string &&
             data.name.size() > 0 &&
             data.category in ['studio', 'practice_room', 'club', 'public_space', 'cafe'] &&
             data.location.keys().hasAll(['geopoint', 'address', 'region']) &&
             data.location.geopoint is latlng &&
             data.location.address is string &&
             data.location.region is string &&
             data.metadata.keys().hasAll(['createdAt', 'updatedAt', 'createdBy', 'verified', 'featured', 'status']) &&
             data.metadata.createdAt is timestamp &&
             data.metadata.updatedAt is timestamp &&
             data.metadata.createdBy is string &&
             data.metadata.verified is bool &&
             data.metadata.featured is bool &&
             data.metadata.status in ['active', 'temporarily_closed', 'permanently_closed'];
    }

    // Community helper functions
    function isPostAuthor(postData) {
      return isAuthenticated() && request.auth.uid == postData.metadata.authorId;
    }

    function isCommentAuthor(commentData) {
      return isAuthenticated() && request.auth.uid == commentData.authorId;
    }

    function isValidPostData(data) {
      return data.keys().hasAll(['title', 'content', 'category', 'status', 'visibility', 'stats', 'metadata']) &&
             data.title is string &&
             data.title.size() > 0 &&
             data.title.size() <= 200 &&
             data.content is string &&
             data.content.size() > 0 &&
             data.content.size() <= 10000 &&
             data.category in ['general', 'qna', 'event', 'marketplace', 'lesson', 'review'] &&
             data.status in ['active', 'hidden', 'deleted', 'reported'] &&
             data.visibility in ['public', 'members_only', 'region_only'] &&
             data.metadata.authorId is string &&
             data.metadata.authorName is string &&
             data.metadata.createdAt is timestamp &&
             data.metadata.updatedAt is timestamp;
    }

    function isValidCommentData(data) {
      return data.keys().hasAll(['postId', 'content', 'authorId', 'authorName', 'status', 'createdAt', 'updatedAt']) &&
             data.postId is string &&
             data.content is string &&
             data.content.size() > 0 &&
             data.content.size() <= 1000 &&
             data.authorId is string &&
             data.authorName is string &&
             data.status in ['active', 'hidden', 'deleted', 'reported'] &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if true; // Public profiles can be read by anyone
      allow write: if isOwner(userId) || isAdmin();
    }

    // Studios collection rules
    match /studios/{studioId} {
      // Read permissions - anyone can read active studios
      allow read: if resource.data.metadata.status == 'active' ||
                     isStudioOwner(resource.data) ||
                     isAdmin();

      // Create permissions - authenticated users can create studios
      allow create: if isAuthenticated() &&
                       isValidStudioData(request.resource.data) &&
                       request.resource.data.metadata.createdBy == request.auth.uid;

      // Update permissions - only studio owners can update
      allow update: if isStudioOwner(resource.data) &&
                       isValidStudioData(request.resource.data) &&
                       // Prevent changing the owner
                       request.resource.data.metadata.createdBy == resource.data.metadata.createdBy &&
                       // Prevent non-admins from changing verification status
                       (isAdmin() || request.resource.data.metadata.verified == resource.data.metadata.verified) &&
                       // Prevent non-admins from changing featured status
                       (isAdmin() || request.resource.data.metadata.featured == resource.data.metadata.featured);

      // Delete permissions - only studio owners can delete
      allow delete: if isStudioOwner(resource.data) || isAdmin();
    }

    // Studio reviews subcollection (for future extension)
    match /studios/{studioId}/reviews/{reviewId} {
      allow read: if true; // Anyone can read reviews
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['rating', 'comment', 'createdAt']) &&
                       request.resource.data.rating is number &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5;
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Studio images subcollection (for future extension)
    match /studios/{studioId}/images/{imageId} {
      allow read: if true; // Anyone can read images
      allow create, update, delete: if isAuthenticated() &&
                                       exists(/databases/$(database)/documents/studios/$(studioId)) &&
                                       isStudioOwner(get(/databases/$(database)/documents/studios/$(studioId)).data);
    }

    // Studio favorites tracking (for future extension)
    match /users/{userId}/favorites/{studioId} {
      allow read, write: if isOwner(userId);
    }

    // Analytics and stats (admin only)
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }

    // System configuration (admin only)
    match /config/{document=**} {
      allow read: if true; // Public config can be read by anyone
      allow write: if isAdmin();
    }

    // Community Posts collection rules
    match /posts/{postId} {
      // Read permissions - anyone can read active public posts
      allow read: if resource.data.status == 'active' &&
                     (resource.data.visibility == 'public' ||
                      (resource.data.visibility == 'members_only' && isAuthenticated()));

      // Create permissions - authenticated users can create posts
      allow create: if isAuthenticated() &&
                       isValidPostData(request.resource.data) &&
                       request.resource.data.metadata.authorId == request.auth.uid &&
                       request.resource.data.status == 'active';

      // Update permissions - only post authors and admins
      allow update: if (isPostAuthor(resource.data) || isAdmin()) &&
                       isValidPostData(request.resource.data) &&
                       // Prevent changing author
                       request.resource.data.metadata.authorId == resource.data.metadata.authorId &&
                       // Non-admins can't change certain fields
                       (isAdmin() ||
                        (request.resource.data.metadata.createdAt == resource.data.metadata.createdAt &&
                         request.resource.data.isPinned == resource.data.isPinned &&
                         request.resource.data.isFeatured == resource.data.isFeatured));

      // Delete permissions - post authors and admins (soft delete by changing status)
      allow delete: if isPostAuthor(resource.data) || isAdmin();
    }

    // Community Comments collection rules
    match /comments/{commentId} {
      // Read permissions - anyone can read active comments on readable posts
      allow read: if resource.data.status == 'active' &&
                     exists(/databases/$(database)/documents/posts/$(resource.data.postId));

      // Create permissions - authenticated users can create comments
      allow create: if isAuthenticated() &&
                       isValidCommentData(request.resource.data) &&
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.status == 'active' &&
                       exists(/databases/$(database)/documents/posts/$(request.resource.data.postId));

      // Update permissions - only comment authors and admins
      allow update: if (isCommentAuthor(resource.data) || isAdmin()) &&
                       isValidCommentData(request.resource.data) &&
                       // Prevent changing author and post
                       request.resource.data.authorId == resource.data.authorId &&
                       request.resource.data.postId == resource.data.postId &&
                       request.resource.data.createdAt == resource.data.createdAt;

      // Delete permissions - comment authors and admins
      allow delete: if isCommentAuthor(resource.data) || isAdmin();
    }

    // Likes collection rules
    match /likes/{likeId} {
      // Read permissions - authenticated users can read their own likes
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;

      // Create permissions - authenticated users can like posts/comments
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.targetType in ['post', 'comment'] &&
                       // Verify target exists
                       (request.resource.data.targetType == 'post' &&
                        exists(/databases/$(database)/documents/posts/$(request.resource.data.targetId)) ||
                        request.resource.data.targetType == 'comment' &&
                        exists(/databases/$(database)/documents/comments/$(request.resource.data.targetId)));

      // Delete permissions - users can remove their own likes
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Community Notifications collection rules
    match /notifications/{notificationId} {
      // Read permissions - users can read their own notifications
      allow read: if isAuthenticated() && request.auth.uid == resource.data.recipientId;

      // Create permissions - system only (through server-side functions)
      allow create: if false;

      // Update permissions - users can mark their notifications as read
      allow update: if isAuthenticated() &&
                       request.auth.uid == resource.data.recipientId &&
                       // Only allow updating isRead field
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']) &&
                       request.resource.data.isRead == true;

      // Delete permissions - users can delete their own notifications
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.recipientId;
    }

    // Community Reports collection rules
    match /reports/{reportId} {
      // Read permissions - admin only
      allow read: if isAdmin();

      // Create permissions - authenticated users can create reports
      allow create: if isAuthenticated() &&
                       request.resource.data.reporterId == request.auth.uid &&
                       request.resource.data.targetType in ['post', 'comment', 'user'] &&
                       request.resource.data.reason in ['spam', 'inappropriate_content', 'harassment', 'false_information', 'copyright_violation', 'other'] &&
                       request.resource.data.status == 'pending';

      // Update permissions - admin only
      allow update: if isAdmin();

      // Delete permissions - admin only
      allow delete: if isAdmin();
    }

    // Community Stats collection rules
    match /communityStats/{document=**} {
      allow read: if true; // Public stats
      allow write: if false; // System only
    }

    // Batch operations for seeding (temporary - remove in production)
    match /{document=**} {
      allow read, write: if false; // Explicitly deny all other operations
    }
  }
}